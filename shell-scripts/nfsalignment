#!/usr/bin/ksh
#
# show affect of alignment
#
### default variables
opt_blocksize=4096  # blocksize for alignment measurements

### process options
while getopts b:h name
do
    case $name in
        b)  opt_blocksize=$OPTARG ;;
	h)  cat <<END >&2
USAGE: nfsalignment [-b blocksize]
    -b blocksize # alignment blocksize (default=${opt_blocksize})
END
        exit 1
    esac
done

dtrace -qn '
inline int OPT_blocksize = '$opt_blocksize';

dtrace:::BEGIN
{
    printf("tracing... press [ctrl]+C when done\n");
}
nfsv3:::op-read-start,
nfsv3:::op-write-start,
nfsv4:::op-read-start,
nfsv4:::op-write-start
{
    this->ts=timestamp;
    this->align=args[2]->offset % OPT_blocksize;
    /* todo: option for offset normalization */
    /* this->align=this->align > 2048 ? this->align=4096 - this->align
        : this->align;
    */
}

/* direction of I/O */
nfsv3:::op-read-start,
nfsv4:::op-read-start
{
    this->rw="read";
}
nfsv3:::op-write-start,
nfsv4:::op-write-start
{
    this->rw="write";
}

/* version of I/O */
nfsv3:::op-read-start,
nfsv3:::op-write-start
{
    this->vers="3";
}
nfsv4:::op-read-start,
nfsv4:::op-write-start
{
    this->rw="4";
}

nfsv3:::op-read-done,
nfsv3:::op-write-done,
nfsv4:::op-read-done,
nfsv4:::op-write-done
/this->ts/
{
    @t[this->rw,this->vers,this->align]=avg((timestamp - this->ts)/1000);
    @c[this->rw,this->vers,this->align]=count();this->ts=0
}

dtrace:::END
{
    printf("NFS alignment analysis for blocksize=%d\n", OPT_blocksize);
    printf("Sample end time %Y\n", walltimestamp);
    printf("%8s %8s %20s %10s %20s\n",
        "r/w", "version", "misalignment (bytes)","Count", "Avg_t (microsecs)");
    printa("%8s %8s %20d %10@d %20@d\n", @c, @t);
}'
