#!/bin/bash
##
##
##
## File Management functions

encryptfile()
{
if [ -z "$1" ]
	then
echo 'Usage: encryptfile filename...';
	else
openssl aes-256-cbc -a -salt -in $1 -out "$1.enc"
fi
}

decryptfile()
{
if [ -z "$1" ]
        then
echo 'Usage: decryptfile filename...';
        else
echo 'Enter filename after decryption...'
read f
openssl aes-256-cbc -a -d -in "$1" -out "$f"
fi
}

## Function to first shred and then remove file(s)
secure-remove()
{
if [ -z $1 ]; then
	printf "%s\nPlease enter at least one filename.\n"
	return 1
	else
		for filename in "$@"
		do
		clear
		printf "%s\nShredding and removing file ${filename} ...\n"
		shred --iterations=7 --remove ${filename}
		[ $? = 0 ] && printf "%s\nFile ${filename} has been securely removed.\n"
		return 0
		done
fi
}

secure-file()
{
if [ -z "$1" ]; then
   printf "%s\n" "Usage: enter edit or view, followed by filename."
   return 5
elif [ -z "$2" ]; then
   printf "%s\n" "ERROR: Missing filename argument. Please re-check..."
   return 5
fi

local ACTION=$1		# First argument given to the command is action to take
local SECRET=$(basename $2)		# Encrypted source file
local WORKDIR=$(dirname $2)
local CLEAR=${SECRET}.decrypted		# Output decrypted file
local GPGUSER=$(whoami)		# Current user running this function

case ${ACTION} in

   view)
   if [ ! -f $2 ]; then
     printf "%s\n" "File ${SECRET} does not appear to exist. Please check the filename again."
     return 1
   else
   clear; gpg2 --decrypt ${WORKDIR}/${SECRET}
   fi
   ;;

   edit)
   if [ ! -f $2 ]; then
     printf "%s\n" "File ${SECRET} does not appear to exist. Please check the filename again."
     return 1
   else
     clear; gpg2 --output ${WORKDIR}/${CLEAR} --decrypt ${WORKDIR}/${SECRET}
     local HASH=$(md5sum ${WORKDIR}/${CLEAR} | cut -d " " -f1)		# Create hash before editing

     vi ${WORKDIR}/${CLEAR}
     local NEWHASH=$(md5sum ${WORKDIR}/${CLEAR} | cut -d " " -f1)		# Create hash after editing

     if [ ${HASH} = ${NEWHASH} ]; then		# Check whether or not the decrypted file was changed
       clear; printf "%s\n" "ATTENTION: File was not modified, removing decrypted file: ${WORKDIR}/${CLEAR}"
       sleep 4
       secure-remove ${WORKDIR}/${CLEAR}		# Remove decrypted file securely
       return 0
     fi

     clear; gpg2 -r ${GPGUSER} --output ${WORKDIR}/${SECRET} --encrypt --armor ${WORKDIR}/${CLEAR}
     clear; printf "%s\n" "SUCCESS: File was modified and re-encrypted, removing decrypted file: ${WORKDIR}/${CLEAR}"
     sleep 4
     secure-remove ${WORKDIR}/${CLEAR}		# Remove decrypted file securely
     return 0
   fi
   ;;

   *)
   printf "%s\n" "Try again..."
esac

}

## Function to remove packages installed today
remove-todays-packages()
{
grep "`date "+%Y-%m-%d"`" /var/log/dpkg.log | awk '{print $4}' | xargs sudo apt-get -y remove --purge
}

## Test password generate
# genpass()
# {
# [ -z ${1} ] && printf "%sUsage: Enter length of password to generate... i.e. genpass 10\n" \
# || /usr/bin/openssl rand -base64 300 | cut -c 1-${1}
# }


## SSH related functions
copy-my-key()
{
[ -z ${1} ] && printf "%sUsage: Enter name of remote host... i.e. copy-my-key testbox01\n" \
|| cat ~/.ssh/id_rsa.pub | ssh $(whoami)@${1} "mkdir ~/.ssh; cat >> ~/.ssh/authorized_keys"
}

## Git Functions
git-add()
{
    [ -z "$1" ] && return
    set -x
    git add "$1"
    git commit -m 'Added.'
#   git push
    set +x
}

function mkcd {
  [ -n "$1" ] && mkdir -p "$@" && cd "$1";
}

function cs {
	cd $1
	ls
}